name: E2E Tests (Playwright)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -u root -p$$MYSQL_ROOT_PASSWORD"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install wait-on globally
      - run: npm install -g wait-on

      # Wait for MySQL service
      - name: Wait for MySQL
        run: |
          for i in {1..10}; do
            if [[ "$(docker inspect --format='{{.State.Health.Status}}' ${{ job.services.mysql.id }})" == "healthy" ]]; then
              echo "✅ MySQL healthy"
              exit 0
            fi
            echo "⏳ Waiting for MySQL... Attempt $i"
            sleep 10
          done
          echo "❌ MySQL not healthy"
          exit 1

      # Initialize MySQL
      - name: Initialize MySQL
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password testdb < back-end/server/init.sql

      # Install backend dependencies
      - name: Install backend deps
        run: npm ci --prefix ./back-end/server

      # Copy .env.ci
      - name: Copy backend env
        run: cp back-end/server/.env.ci back-end/server/.env

      # Start backend server
      - name: Start backend
        run: |
          cd back-end/server
          node server &
          echo "✅ Backend started"

      # Install frontend dependencies
      - name: Install frontend deps
        run: npm ci --prefix ./front-end

      # Start frontend server
      - name: Start frontend
        run: |
          cd front-end
          npm run dev &
          echo "✅ Frontend started"

      # Install Playwright deps
      - name: Install Playwright
        run: |
          cd e2e-tests
          npm ci
          npx playwright install --with-deps

      # Wait for backend & frontend
      - name: Wait for backend & frontend
        run: npx wait-on --timeout 180000 http://127.0.0.1:5001/health http://127.0.0.1:5173

      # Run Playwright tests
      - name: Run Playwright tests
        run: |
          cd e2e-tests
          npx playwright test --reporter=html
        env:
          CI: true

      # Upload report
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e-tests/playwright-report/
          retention-days: 30
