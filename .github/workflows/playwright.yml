name: E2E Tests (Playwright)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  playwright:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -u root -p$$MYSQL_ROOT_PASSWORD"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      # 1Ô∏è‚É£ Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 2Ô∏è‚É£ Wait for MySQL service to become healthy
      - name: Wait for MySQL Service
        run: |
          for i in {1..10}; do
            if [[ "$(docker inspect --format='{{.State.Health.Status}}' ${{ job.services.mysql.id }})" == "healthy" ]]; then
              echo "‚úÖ MySQL service is healthy. Waiting 5s for network stability..."
              sleep 5 # Critical: Wait an extra 5s for EAI_AGAIN fix
              exit 0
            fi
            echo "‚è≥ Waiting for MySQL service... Attempt $i"
            sleep 10
          done
          echo "‚ùå MySQL did not become healthy in time."
          exit 1
      
      # 3Ô∏è‚É£ Database Cleanup (Crucial fix for ER_DUP_ENTRY)
      - name: Clean Database Before Backend Start
        run: |
          echo "üßπ Dropping and recreating testdb..."
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "DROP DATABASE IF EXISTS testdb; CREATE DATABASE testdb;"

      # 4Ô∏è‚É£ Install dependencies
      - name: Install Dependencies
        run: |
          npm ci --prefix ./back-end/server
          npm ci --prefix ./front-end
          npm ci --prefix ./e2e-tests

      # 5Ô∏è‚É£ Install Playwright browsers (after npm ci)
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: ./e2e-tests

      # 6Ô∏è‚É£ Start Backend with logs (RELIANCE ON COMMITTED .env.ci)
      - name: Start Backend Server
        run: |
          echo "üîπ Starting backend..."
          # Source the committed .env.ci file to set environment variables
          source back-end/server/.env.ci
          # Start the server and pipe output to a log file
          node back-end/server/server.js > back-end/server/server.log 2>&1 &
          echo "üîπ Backend PID: $!"
        working-directory: ./

      # 7Ô∏è‚É£ Wait for Backend HTTP Health Check (FIXED: Correct log path usage)
      - name: Wait for Backend to be Ready (Health Check)
        run: |
          # Use curl against the new /health endpoint for a robust check
          timeout 180 bash -c 'until curl -s http://127.0.0.1:5001/health > /dev/null; do
            echo "‚è≥ Waiting for backend (5001/health)... Checking logs..."
            # Using the literal path resolves the tail: cannot open '' error
            tail -n 15 "./back-end/server/server.log"
            sleep 5
          done
          echo "‚úÖ Backend is ready and responding!"'
        working-directory: ./

      # 8Ô∏è‚É£ Start Frontend (Vite)
      - name: Start Frontend
        run: npm run dev --prefix front-end > front-end/vite.log 2>&1 &
      
      # 9Ô∏è‚É£ Wait for Frontend to be ready (HTTP Check)
      - name: Wait for Frontend
        run: |
          timeout 180 bash -c 'until curl -s http://127.0.0.1:5173 > /dev/null; do
            echo "‚è≥ Waiting for frontend..."
            sleep 5
          done
          echo "‚úÖ Frontend is ready!"'

      # üîü Run Playwright E2E Tests
      - name: Run Playwright E2E Tests
        run: npx playwright test --reporter=html
        working-directory: ./e2e-tests

      # 11 Upload Playwright report as artifact
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e-tests/playwright-report/
          retention-days: 30